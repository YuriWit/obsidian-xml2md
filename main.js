/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("file-input", "XML to Markdown", (evt) => {
      new import_obsidian.Notice("This is a notice!");
      new SampleModal(this.app, (result) => {
        new import_obsidian.Notice(`Hello, ${result}!`);
      }).open();
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    new import_obsidian.Setting(contentEl).setHeading().setName("Import XML Data");
    const importSettingsContainer = contentEl.createDiv(
      "statblock-additional-container"
    );
    new import_obsidian.Setting(importSettingsContainer).setDesc(
      "Import data from xml files. Monsters are stored by name, so only the last creature by that name will be saved. This is destructive - any saved creature will be overwritten."
    );
    const importAdditional = importSettingsContainer.createDiv("additional");
    const importAppFile = new import_obsidian.Setting(importAdditional).setName("Import DnDAppFile").setDesc("Only import content that you own.");
    const inputAppFile = createEl("input", {
      attr: {
        type: "file",
        name: "dndappfile",
        accept: ".xml",
        multiple: true
      }
    });
    inputAppFile.onchange = async () => {
      const { files } = inputAppFile;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputAppFile;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "appfile");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importAppFile.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import DnDAppFile Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputAppFile);
      b.onClick(() => inputAppFile.click());
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setHeading().setName("Import Homebrew Creatures");
    const importSettingsContainer = containerEl.createDiv(
      "statblock-additional-container"
    );
    new import_obsidian.Setting(importSettingsContainer).setDesc(
      "Import creatures from creature files. Monsters are stored by name, so only the last creature by that name will be saved. This is destructive - any saved creature will be overwritten."
    );
    const importAdditional = importSettingsContainer.createDiv("additional");
    const importAppFile = new import_obsidian.Setting(importAdditional).setName("Import DnDAppFile").setDesc("Only import content that you own.");
    const inputAppFile = createEl("input", {
      attr: {
        type: "file",
        name: "dndappfile",
        accept: ".xml",
        multiple: true
      }
    });
    inputAppFile.onchange = async () => {
      const { files } = inputAppFile;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputAppFile;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "appfile");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importAppFile.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import DnDAppFile Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputAppFile);
      b.onClick(() => inputAppFile.click());
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
